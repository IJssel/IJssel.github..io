(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{338:function(a,n,t){"use strict";t.r(n);var e=t(16),s=Object(e.a)({},(function(){var a=this,n=a.$createElement,t=a._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"ajax"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ajax"}},[a._v("#")]),a._v(" ajax")]),a._v(" "),t("h3",{attrs:{id:"前端相关的技术点："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端相关的技术点："}},[a._v("#")]),a._v(" 前端相关的技术点：")]),a._v(" "),t("ul",[t("li",[a._v("html（html5） 主要用来实现页面的排版布局")]),a._v(" "),t("li",[a._v("css（css3） 主要用来实现页面的样式美化")]),a._v(" "),t("li",[a._v("JavaScript（jQuery） 主要用来实现前端功能特效")])]),a._v(" "),t("blockquote",[t("p",[a._v("采用上面的这些技术开发的页面和前端特效脚本需要放到服务器才能够对外提供服务，才能够让互联网上的网友看到。")])]),a._v(" "),t("h3",{attrs:{id:"客户端与服务器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#客户端与服务器"}},[a._v("#")]),a._v(" 客户端与服务器")]),a._v(" "),t("blockquote",[t("p",[a._v("本质上都是计算机，只不过样子不同，配置不同，应用场景不同（安装的应用软件不同）")])]),a._v(" "),t("ul",[t("li",[a._v("客户端主要用于普通上网用户")]),a._v(" "),t("li",[a._v("服务器主要给上网用户提供后台服务")])]),a._v(" "),t("h3",{attrs:{id:"网络相关概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络相关概念"}},[a._v("#")]),a._v(" 网络相关概念")]),a._v(" "),t("ul",[t("li",[a._v("IP地址（唯一的确定互联网上的一台计算机）")]),a._v(" "),t("li",[a._v("域名 IP地址的别名，方便记忆")]),a._v(" "),t("li",[a._v("DNS 用于维护IP地址与域名的关系")]),a._v(" "),t("li",[a._v("端口 用来确定计算机上的网络应用程序")])]),a._v(" "),t("h3",{attrs:{id:"通信协议理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通信协议理解"}},[a._v("#")]),a._v(" 通信协议理解")]),a._v(" "),t("blockquote",[t("p",[a._v("通信双方约定的规则")])]),a._v(" "),t("ul",[t("li",[a._v("http/https 超为本传输协议")]),a._v(" "),t("li",[a._v("ftp 文件传输协议")]),a._v(" "),t("li",[a._v("smpt/pop3 邮件收发协议")]),a._v(" "),t("li",[a._v("......")])]),a._v(" "),t("h3",{attrs:{id:"搭建服务器环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#搭建服务器环境"}},[a._v("#")]),a._v(" 搭建服务器环境")]),a._v(" "),t("h4",{attrs:{id:"wamp集成环境介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wamp集成环境介绍"}},[a._v("#")]),a._v(" wamp集成环境介绍")]),a._v(" "),t("ul",[t("li",[a._v("windows 操作系统")]),a._v(" "),t("li",[a._v("Apache 提供静态资源服务（html页面、js文件、css文件、图片。。。）")]),a._v(" "),t("li",[a._v("MySQL 数据库")]),a._v(" "),t("li",[a._v("php 编程语言，可以用来开发网站")])]),a._v(" "),t("h4",{attrs:{id:"wamp的安装配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wamp的安装配置"}},[a._v("#")]),a._v(" wamp的安装配置")]),a._v(" "),t("ul",[t("li",[a._v("参见详细文档")])]),a._v(" "),t("h3",{attrs:{id:"网站"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网站"}},[a._v("#")]),a._v(" 网站")]),a._v(" "),t("blockquote",[t("p",[a._v("网站由一系列页面组成（页面由js、css、图片、html标签。。。所有的这些文件都被称为资源）")])]),a._v(" "),t("h4",{attrs:{id:"静态网站"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态网站"}},[a._v("#")]),a._v(" 静态网站")]),a._v(" "),t("blockquote",[t("p",[a._v("就是提前写好的html页面（包括图片、媒体文件。。。静态资源文件），并且部署到服务器上\n"),t("br"),a._v("静态网站主要存在的问题：")])]),a._v(" "),t("ul",[t("li",[a._v("随着网站规模的增大可维护性逐渐降低")]),a._v(" "),t("li",[a._v("没有交互性")])]),a._v(" "),t("h4",{attrs:{id:"动态网站"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态网站"}},[a._v("#")]),a._v(" 动态网站")]),a._v(" "),t("blockquote",[t("p",[a._v("动态指的是html页面是动态生成的，这里动态生成的不一定是一个完整的页面，有可能仅仅是页面的一部分，或者仅仅是数据(普通字符串、json、xml)\n实现动态网站的技术：")])]),a._v(" "),t("ul",[t("li",[a._v("php")]),a._v(" "),t("li",[a._v("java（jsp）")]),a._v(" "),t("li",[a._v(".net")]),a._v(" "),t("li",[a._v("Node.js")]),a._v(" "),t("li",[a._v("python")]),a._v(" "),t("li",[a._v("......")])]),a._v(" "),t("p",[a._v("登录验证")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("<script type=\"text/javascript\">\n    window.onload = function(){\n        var btn = document.getElementById('btn');\n        btn.onclick = function(){\n            var uname = document.getElementById('username').value;\n            var pw = document.getElementById('password').value;\n\n            // 使用Ajax发送请求需要如下几步：\n            // 1、创建XMLHttpRequest对象\n            var xhr = new XMLHttpRequest();\n            // 2、准备发送\n            xhr.open('get','./01check.php?username='+uname+'&password='+pw,true);\n            // 3、执行发送动作\n            xhr.send(null);\n            // 4、指定回调函数\n            xhr.onreadystatechange = function(){\n                if(xhr.readyState == 4){\n                    if(xhr.status == 200){\n                        var data = xhr.responseText;\n                        var info = document.getElementById('info');\n                        if(data == '1'){\n                            info.innerHTML = '登录成功';\n                        }else if(data == '2'){\n                            info.innerHTML = '用户名或者密码错误';\n                        }\n                        \n<body>\n    <form>\n        用户名：\n        <input type=\"text\" name=\"username\" id=\"username\"><span id=\"info\"></span>\n        <br> 密码：\n        <input type=\"text\" name=\"password\" id=\"password\">\n        <input type=\"button\" value=\"登录\" id=\"btn\">\n    </form>\n</body>\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" btn.onclick = function(){\n  var uname = document.getElementById('username').value;\n  var pw = document.getElementById('password').value;\n\n  // 1、创建XMLHttpRequest对象\n  var xhr = null;\n  if(window.XMLHttpRequest){\n  \txhr = new XMLHttpRequest();//标准\n    }else{\n    xhr = new ActiveXObject(\"Microsoft\");//IE6\n    }\n    \n     // readyState=0表示xhr对象创建完成(有无)\n    //console.log(xhr.readyState + '----------1-----------');\n    \n     // 2、准备发送\n    参数一：请求方式（get获取数据；post提交数据）\n    参数二：请求地址\n    参数三：同步或者异步标志位，默认是true表示异步，false表示同步\n\n  //get请求那么请求参数必须在url中传递\n    //encodeURI()用来对中文参数进行编码，防止乱码\n    var param = 'username='+uname+'&password='+pw;\n  xhr.open('get','03get.php?'+encodeURI(param),true);//方式 地址转码 true异步false同步\n    // 3、执行发送动作\n    xhr.send(null);//get请求这里需要添加null参数\n    \n  //post请求参数通过send传递，不需要通过encodeURI()转码\n   //必须设置请求头信息\n   var param = 'username='+uname+'&password='+pw;\n   xhr.open('post','04post.php',false);\t\t\t//方式 地址 true异步\n   // 3、执行发送动作\n  xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");//头信息\n   xhr.send(param);\t\t\t//post请求参数在这里传递，并且不需要转码\n    \n    // 4、指定回调函数\n     //readyState:\n  \t 2 浏览器已经收到了服务器响应的数据\n  \t 3 正在解析数据\n  \t 4 数据已经解析完成，可以使用了\n    xhr.onreadystatechange = function(){\n      if(xhr.readyState == 4){\n        if(xhr.status == 200){\t\t\n           alert(xhr.responseText);\n         }\n    // http的常见状态码\n       200表示响应成功\n       404没有找到请求的资源\n       500服务器端错误\n")])])]),t("h4",{attrs:{id:"ajax直接封装实例-查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ajax直接封装实例-查询"}},[a._v("#")]),a._v(" ajax直接封装实例: 查询")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//功能需求：页面输入图书编号，查询服务器端的图书信息并且解析渲染\n<script type=\"text/javascript\" src=\"./ajax.js\"><\/script>\n<script type=\"text/javascript\">\n\nwindow.onload = function(){\n var btn = document.getElementById('btn');\n btn.onclick = function(){\n  var code = document.getElementById('code').value;\n  \n  //自己封装\n  ajax('./11.php','get','code='+code,'json',function(data){//php+get+code+json+dat\n  \n  // 解析数据并渲染页面\n    var info = document.getElementById('info');\n    if(data.flag == 0){\t\t//返回0没有\n     info.innerHTML = '没有这本书';\n    }else{\n       var tag = '<ul><li>书名：'+data.bookname+'</li><li>作者：'+data.author+'</li>\t\t  <li>描述：'+data.desc+'</li></ul>';\n    info.innerHTML = tag;\n         }\n      });\n   }\n}\n\n//封装ajax.js\nfunction ajax(url,type,param,dataType,callback){\t//url+type+param+data+callback\n    var xhr = null;\t\n    if(window.XMLHttpRequest){\n        xhr = new XMLHttpRequest();\n    }else{\n        xhr = new ActiveXObject('Microsoft.XMLHTTP');\n    }\n    if(type == 'get'){\t\t//get\n        url += \"?\" + param;\n    }\n    xhr.open(type,url,true);\n\n    var data = null;\n    if(type == 'post'){\t\t//post\n        data = param;\n        xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n    }\n    xhr.send(data);\t\t//发送\n    xhr.onreadystatechange = function(){\n        if(xhr.readyState == 4){\n            if(xhr.status == 200){\n                var data = xhr.responseText;\n                if(dataType == 'json'){\n                    data = JSON.parse(data);\n                }\n                callback(data);\n            }\n        }\n    }\n}\n")])])]),t("p",[a._v("局限性: 传参的顺序严格要求, 参数以对象形式传递")]),a._v(" "),t("h4",{attrs:{id:"调用jquery-ajax-封装实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调用jquery-ajax-封装实例"}},[a._v("#")]),a._v(" 调用jQuery-ajax 封装实例")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("<script type=\"text/javascript\" src=\"./jquery.js\"><\/script>\n<script type=\"text/javascript\">\n//jQuery-ajax相关API基本使用\nwindow.onload = function() {\nvar btn = document.getElementById('btn');\n btn.onclick = function() {\n  var code = document.getElementById('code').value;\n  \n  //调用jQuery封装 不同点\n  $.ajax({\t\n  \ttype: 'post',\t\n  \turl: './11.php',\t\t// url: './11.php?code=' + code,\n  \tdata : {code:code},\n  \tdataType: 'json',   \t//xml json text html script jsonp\n  success: function(data) { \n  \n   var info = document.getElementById('info');\n  if (data.flag == 0) {\n    info.innerHTML = '没有这本书';\n    } else {\n    var tag = '<ul><li>书名：' + data.bookname + '</li><li>作者：' + data.author + '</li><li>描述：' + data.desc + '</li></ul>';\n   info.innerHTML = tag;\n            }\n         }\n     });\n   }\n}\n<\/script>\n\n")])])]),t("h4",{attrs:{id:"jquery-ajax形式封装-最终"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jquery-ajax形式封装-最终"}},[a._v("#")]),a._v(" JQuery-ajax形式封装(最终)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$(function(){\n  $(\"#btn\").click(function(){\n  var code = $(\"#code\").val();\n  $.ajax({\n  \ttype:'get',\t\t//省略 默认get\n  \turl:'./11.php',\n  \tdata:{code:code},\n  \tdataType:'json',\n  \tsuccess:function(data){\n  \tif(data.flag == 0){\n    \t$(\"#info\").html(\"该图书不存在\");\n  \t}else{\n  \t\tvar tag = '<ul><li>书名：' + data.bookname + '</li><li>作者：' + data.author \t\t\t+'</li><li>描述：' + data.desc + '</li></ul>';\n   $(\"#info\").html(tag);\n   }\n },\n error:function(data){\n  console.dir(data);\n   $(\"#info\").html(\"服务器发生错误，请与管理员联系\");\n   }\n   });\n  });\n });\n")])])]),t("p",[a._v("好处: 次序无要求  简化")]),a._v(" "),t("h4",{attrs:{id:"仿jquery封装-jquery封装原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#仿jquery封装-jquery封装原理"}},[a._v("#")]),a._v(" 仿JQuery封装--jquery封装原理(??)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$(function(){\n $(\"#btn\").click(function(){\n var code = $(\"#code\").val();\n var data = ajax({\n type:'post',\n url:'./14.php',\n dataType:'json',\n async : false,\n data:{username:'张三',password:'123'}\n });\n console.log(data);\n var html = '<div><span>用户名：'+data.password+'</span><span>密码：'+data.password+'</span></div>'\n $(\"#info\").html(html);\n });\n});\n<\/script>\n\n//内部实现\nfunction ajax(obj){\n    // 默认参数\n    var defaults = {\n        type : 'get',\n        data : {},\n        url : '#',\n        dataType : 'text',\n        async : true,\n        success : function(data){console.log(data)}\n    }\n    // 处理形参，传递参数的时候就覆盖默认参数，不传递就使用默认参数\n    for(var key in obj){\n        defaults[key] = obj[key];\n    }\n    // 1、创建XMLHttpRequest对象\n    var xhr = null;\n    if(window.XMLHttpRequest){\n        xhr = new XMLHttpRequest();\n    }else{\n        xhr = new ActiveXObject('Microsoft.XMLHTTP');\n    }\n    // 把对象形式的参数转化为字符串形式的参数\n    /*\n    {username:'zhangsan','password':123}\n    转换为\n    username=zhangsan&password=123\n    */\n    var param = '';\n    for(var attr in obj.data){\n        param += attr + '=' + obj.data[attr] + '&';\n    }\n    if(param){\n        param = param.substring(0,param.length - 1);\n    }\n    // 处理get请求参数并且处理中文乱码问题\n    if(defaults.type == 'get'){\n        defaults.url += '?' + encodeURI(param);\n    }\n    // 2、准备发送（设置发送的参数）\n    xhr.open(defaults.type,defaults.url,defaults.async);\n    // 处理post请求参数并且设置请求头信息（必须设置）\n    var data = null;\n    if(defaults.type == 'post'){\n        data = param;\n        xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n    }\n    // 3、执行发送动作\n    xhr.send(data);\n    // 处理同步请求，不会调用回调函数\n    if(!defaults.async){\n        if(defaults.dataType == 'json'){\n            return JSON.parse(xhr.responseText);\n        }else{\n            return xhr.responseText;\n        }\n    }\n    // 4、指定回调函数（处理服务器响应数据）\n    xhr.onreadystatechange = function(){\n        if(xhr.readyState == 4){\n            if(xhr.status == 200){\n                var data = xhr.responseText;\n                if(defaults.dataType == 'json'){\n                    // data = eval(\"(\"+ data +\")\");\n                    data = JSON.parse(data);\n                }\n                defaults.success(data);\n            }\n        }\n    }\n}\n\n")])])]),t("h2",{attrs:{id:"跨域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[a._v("#")]),a._v(" 跨域")]),a._v(" "),t("p",[a._v("静态script跨域(少用)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('//script标签里面的async属性表示异步加载资源，默认情况下是同步加载 \n <script async type="text/javascript" src="http://tom.com/data.php?flag=1">\n<\/script>\n <script type="text/javascript">\n   console.log(data.username);\n <\/script>\n')])])]),t("p",[a._v("这种方式存在的两个主要的问题：\n1、必须保证加载的顺序   获取跨域数据必须在script下面\n2、不方便通过程序传递参数")]),a._v(" "),t("p",[a._v("sonp实现跨域")]),a._v(" "),t("p",[a._v("动态跨域")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("<script type=\"text/javascript\">\n// 这里的foo函数由谁调用？实际上有服务器响应的内容（这里的内容就是js代码-函数调用foo(123)）调用\nfunction foo(data){\t//顺序不重要\t\tfoo任意函数名\n   console.log(data.username,data.password);\n}\n\nvar script = document.createElement('script');\nscript.src = 'http://tom.com/data.php?flag='+flag;\t//地址\nvar head = document.getElementsByTagName('head')[0];\nhead.appendChild(script);\n")])])]),t("p",[a._v("这就是jsonp的本质：动态创建script标签，然后通过它的src属性发送跨域请求，然后服务器端响应的数据格式为【函数调用（foo(实参)）】，所以在发送请求之前必须先声明一个函数，并且函数的名字与参数中传递的名字要一致。这里声明的函数是由服务器响应的内容（实际就是一段js代码-函数调用）来调用")]),a._v(" "),t("p",[a._v("jsonp-JQuery跨域 智能提示案例")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$(function(){\n  $(\"#keyword\").keyup(function(){\n  var kw = $(this).val();\n  $.ajax({\n    url:'https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su',\n    jsonp:'cb',//jsonp属性的作用就是自定义参数名字（callback=abc 这里的名字指的是等号前面的键，后端根据这个键获取方法名，jquery的默认参数名称是callback）\n    data:{wd:kw},\n    dataType:'jsonp',//这个属性的作用就是自定义回调函数的名字（callback=abc ，这里的名字指的是等号后面的值）\n    success:function(data){\n      var sug = data.s;\n      var tag = '<ul>';\n      $.each(sug,function(i,e){\n           tag += '<li>'+e+'</li>';\n    });\n    tag += '</ul>';\n    $(\"#info\").html(tag);\n    $(\"#info\").find('li').hover(function(){\n     $(this).css('backgroundColor','lightblue');\n    },function(){\n      $(this).css('backgroundColor','lightgray');\n    });\n    }\n  });\n });\n});\n")])])]),t("h4",{attrs:{id:"仿jquery综合ajax-jsonp跨域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#仿jquery综合ajax-jsonp跨域"}},[a._v("#")]),a._v(" 仿JQuery综合ajax+jsonp跨域")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("<script type=\"text/javascript\" src=\"./ajax2.js\"><\/script>\n<script type=\"text/javascript\">\najax({\n url:\"http://tom.com/jsonp.php\",\n dataType:'jsonp',\n data:{username:'zhangsan',password:'123'},\n jsonp:'cb',\n jsonpCallback:'abc',\n success:function(data){//这里的data是形参\n console.log(data.username,data.password);\n  }\n});\n")])])]),t("p",[a._v("js封装")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function ajax(obj){\n    var defaults = {\n        type : 'get',\n        async : true,\n        url : '#',\n        dataType : 'text',\n        jsonp : 'callback',\n        data : {},\n        success:function(data){console.log(data);}\n    }\n\n    for(var key in obj){\n        defaults[key] = obj[key];\n    }\n\n    if(defaults.dataType == 'jsonp'){\t//跨域\n        ajax4Jsonp(defaults);\n    }else{\n        ajax4Json(defaults);\t//ajax\n    }\n}\n\n//ajax封装\nfunction ajax4Json(defaults){\t\n    // 1、创建XMLHttpRequest对象\n    var xhr = null;\n    if(window.XMLHttpRequest){\n        xhr = new XMLHttpRequest();\n    }else{\n        xhr = new ActiveXObject('Microsoft.XMLHTTP');\n    }\n    // 把对象形式的参数转化为字符串形式的参数\n    /*\n    {username:'zhangsan','password':123}\n    转换为\n    username=zhangsan&password=123\n    */\n    var param = '';\n    for(var attr in defaults.data){\n        param += attr + '=' + defaults.data[attr] + '&';\n    }\n    if(param){\n        param = param.substring(0,param.length - 1);\n    }\n    // 处理get请求参数并且处理中文乱码问题\n    if(defaults.type == 'get'){\n        defaults.url += '?' + encodeURI(param);\n    }\n    // 2、准备发送（设置发送的参数）\n    xhr.open(defaults.type,defaults.url,defaults.async);\n    // 处理post请求参数并且设置请求头信息（必须设置）\n    var data = null;\n    if(defaults.type == 'post'){\n        data = param;\n        xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n    }\n    // 3、执行发送动作\n    xhr.send(data);\n    // 处理同步请求，不会调用回调函数\n    if(!defaults.async){\n        if(defaults.dataType == 'json'){\n            return JSON.parse(xhr.responseText);\n        }else{\n            return xhr.responseText;\n        }\n    }\n    // 4、指定回调函数（处理服务器响应数据）\n    xhr.onreadystatechange = function(){\n        if(xhr.readyState == 4){\n            if(xhr.status == 200){\n                var data = xhr.responseText;\n                if(defaults.dataType == 'json'){\n                    // data = eval(\"(\"+ data +\")\");\n                    data = JSON.parse(data);\n                }\n                defaults.success(data);\n            }\n        }\n    }\n}\n\n//jsonp跨域封装\nfunction ajax4Jsonp(defaults){\t\t\n    // 这里是默认的回调函数名称\n    // expando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n    var cbName = 'jQuery' + ('1.11.1' + Math.random()).replace(/\\D/g,\"\") + '_' + (new Date().getTime());\n    if(defaults.jsonpCallback){\n        cbName = defaults.jsonpCallback;\n    }\n\n    // 这里就是回调函数，调用方式：服务器响应内容来调用\n    // 向window对象中添加了一个方法，方法名称是变量cbName的值\n    window[cbName] = function(data){\n        defaults.success(data);//这里success的data是实参\n    }\n\n    var param = '';\n    for(var attr in defaults.data){\n        param += attr + '=' + defaults.data[attr] + '&';\n    }\n    if(param){\n        param = param.substring(0,param.length-1);\n        param = '&' + param;\n    }\n    var script = document.createElement('script');\n    script.src = defaults.url + '?' + defaults.jsonp + '=' + cbName + param;\n    var head = document.getElementsByTagName('head')[0];\n    head.appendChild(script);\n}\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);