(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{339:function(e,t,n){"use strict";n.r(t);var a=n(16),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"node"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node"}},[e._v("#")]),e._v(" node")]),e._v(" "),n("p",[e._v("node 是模块化开发")]),e._v(" "),n("p",[e._v("规则")]),e._v(" "),n("p",[e._v("1.如何定义模块化，一个js就是一个模块化，模块内部的成员")]),e._v(" "),n("p",[e._v("都是相互独立的")]),e._v(" "),n("p",[e._v("包含文件名称的全路径")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(__filename);\n")])])]),n("p",[e._v("文件的路径（不包含文件名称）")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(__dirname);\n")])])]),n("p",[e._v("定时函数，用法与浏览器中的定时函数类似")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var timer = setTimeout(function(){\n    console.log(123);\n},1000);\n\n//清除定时 \nsetTimeout(function(){\n    clearTimeout(timer);\n},2000);\n")])])]),n("p",[e._v("在Node.js中没有window对象，但是有一个类似的对象global，访问全局成员的时候可以省略global")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("global.console.log(123456);\n")])])]),n("p",[e._v("argv是一个数组，默认情况下，前两项数据分别是：Node.js环境的路径；当前执行的js文件的全路径\n从第三个参数开始表示命令行参数")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(process.argv);\n")])])]),n("p",[e._v("打印当前系统的架构（64位或者32位）")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(process.arch);\n")])])]),n("p",[e._v("模块化开发")]),e._v(" "),n("p",[e._v("传统非模块化开发有如下的缺点：\n1、命名冲突\n2、文件依赖")]),e._v(" "),n("p",[e._v("前端标准的模块化规范：\n1、AMD - requirejs\n2、CMD - seajs(阿里较多)")]),e._v(" "),n("p",[e._v("服务器端的模块化规范：\n1、CommonJS - Node.js")]),e._v(" "),n("p",[e._v("模块化相关的规则：\n1、如何定义模块：一个js文件就是一个模块，模块内部的成员都是相互独立\n2、模块成员的导出和引入")]),e._v(" "),n("p",[e._v("模块成员的导出最终以module.exports为准")]),e._v(" "),n("p",[e._v("如果要导出单个的成员或者比较少的成员，一般我们使用exports导出；\n如果要导出的成员比较多，一般我们使用module.exports的方式\n这两种方式不能同时使用")]),e._v(" "),n("p",[e._v("exports与module的关系：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module.exports = exports = {};\n\n*/\nvar sum = function(a,b){\n    return parseInt(a) + parseInt(b);\n}\n")])])]),n("p",[e._v("引入模块")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var  module = require('./03.js');\nvar ret = module.sum(12,13);\nconsole.log(ret);\n")])])]),n("p",[e._v("导出模块成员")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("exports.sum = sum;\n\n// 导出成员的另一种方式\nmodule.exports = function(){\n    console.log('hello');\n};\n")])])]),n("p",[n("strong",[e._v("注意:模块文件的后缀有：.js \t>\t.json\t>\t.node（优先级）")])]),e._v(" "),n("h2",{attrs:{id:"node-js语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-js语法"}},[e._v("#")]),e._v(" node.js语法")]),e._v(" "),n("p",[e._v("Buffer的基本操作\nBuffer本质上就是字节数组\n1、构造方法（类）\n2、静态方法\n3、实例方法")]),e._v(" "),n("h4",{attrs:{id:"实例化buf对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实例化buf对象"}},[e._v("#")]),e._v(" 实例化buf对象")]),e._v(" "),n("p",[e._v("Buffer对象是Node处理二进制数据的一个接口，它是Node原生提供的全局对象，可以直接使用，不需要require（buffer），本质上是字节数组")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let buf = new Buffer(5);\nlet buf = Buffer.alloc(5);\nconsole.log(buf);\n\nlet buf = Buffer.from('hello','utf8');\nconsole.log(buf);\n\nlet buf = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);\nconsole.log(buf.toString());\n")])])]),n("h4",{attrs:{id:"静态方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[e._v("#")]),e._v(" 静态方法")]),e._v(" "),n("p",[e._v("验证编码")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("onsole.log(Buffer.isEncoding('utf8'));\t\tgbk不支持\n")])])]),n("p",[e._v("验证是否buf")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let buf = Buffer.from('hello');\nconsole.log(Buffer.isBuffer(buf));\t=>true\n")])])]),n("p",[e._v("长度")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let buf = Buffer.from('中国','ascii');\nconsole.log(Buffer.byteLength(buf));\t=>2 //ASCII为2 utf8为6\nconsole.log(buf.toString());\n")])])]),n("p",[e._v("拼接字符串")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let buf1 = Buffer.alloc(3);\nlet buf2 = Buffer.alloc(5);\nlet buf3 = Buffer.concat([buf1,buf2]);\t\t\nconsole.log(Buffer.byteLength(buf3));\t=>8\t\n")])])]),n("p",[n("strong",[e._v("注意: 数字相加其他拼接")])]),e._v(" "),n("h4",{attrs:{id:"实例方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),n("p",[e._v("向Buffer对象写入内容")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let buf = Buffer.alloc(5);\nbuf.write('hello',2,2);\nconsole.log(buf);\t=>\n")])])]),n("p",[e._v("截取新的Buffer对象")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let buf1 = buf.slice(2,3);//起始,结束位置\n")])])]),n("p",[e._v("把buf对象转换字符串")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("tostring()\n")])])]),n("p",[e._v("把buf对象转成json形式")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("toJson()\nconst json = JSON.stringify(buf);\n")])])]),n("p",[n("strong",[e._v("注意:toJSON方法不需要显式调用，当JSON.stringify方法调用的时候会自动调用toJSON方法")])]),e._v(" "),n("h4",{attrs:{id:"路径操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路径操作"}},[e._v("#")]),e._v(" 路径操作")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const path = require('path');\n")])])]),n("p",[e._v("获取路径的最后一部分")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(path.basename('/foo/bar/baz/asdf/quux.html'));\nconsole.log(path.basename('/foo/bar/baz/asdf/quux.html', '.html'));\n")])])]),n("p",[e._v("获取路径")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(__dirname);\nconsole.log(path.dirname('/abc/qqq/www/abc'));//只有路径没名称\n")])])]),n("p",[e._v("获取扩展名称")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(path.extname('index.html'));\n")])])]),n("p",[e._v("路径的格式化处理")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("path.format() obj->string\t//将对象转字符串\npath.parse()  string->obj\t//将字符串转对象\n")])])]),n("p",[n("strong",[e._v("扩展:root: 文件根路径\tdir文件全路径\tbase文件全部名(包扩展名)\text扩展名 name文件名")])]),e._v(" "),n("p",[e._v("判断是否为绝对路径")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(path.isAbsolute('/foo/bar'));\n")])])]),n("p",[e._v("拼接路径")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(path.join('/foo', 'bar', 'baz/asdf', 'quux', '../../'));\n")])])]),n("p",[e._v("注意:  ..表示上层路径；.表示当前路径  ,在连接路径的时候会格式化路径")]),e._v(" "),n("p",[e._v("规范化路径")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" console.log(path.normalize('/foo/bar//baz/asdf/quux/..'));\nconsole.log(path.normalize('C:\\\\temp\\\\\\\\foo\\\\bar\\\\..\\\\'));\n")])])]),n("p",[e._v("计算相对路径")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(path.relative('/data/orandea/test/aaa','/data/orandea/impl/bbb'));\nconsole.log(path.relative('C:\\\\orandea\\\\test\\\\aaa','C:\\\\orandea\\\\impl\\\\bbb'));\n")])])]),n("p",[e._v("解析路径")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(path.resolve('wwwroot', 'static_files/png/', '../gif/image.gif'));\n")])])]),n("p",[e._v("两个特殊属性")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(path.delimiter);//表示路径分隔符（windows是\\ Linux是/）\nconsole.log(path.sep);//环境变量分隔符(windows中使用; linux中使用:)\n")])])]),n("p",[e._v("异步I/O input/output")]),e._v(" "),n("p",[e._v("1.文件操作")]),e._v(" "),n("p",[e._v("2.网络操作")]),e._v(" "),n("p",[e._v("在浏览器中也存在异步操作")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("定时任务")])]),e._v(" "),n("li",[n("p",[e._v("事件处理")])]),e._v(" "),n("li",[n("p",[e._v("ajax回掉处理")])])]),e._v(" "),n("p",[e._v("js的运行是单线程的，有可能导致跳转不出")]),e._v(" "),n("p",[e._v("解决方法：引入事件队处理")]),e._v(" "),n("p",[e._v("Node.js中的事件模型与浏览器中的事件模型类似")]),e._v(" "),n("p",[e._v("单线程+事件队列")]),e._v(" "),n("p",[e._v("文件操作")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const fs = require('fs');\nfs.stat('.abc',(err,stat))  => {\n//一般回调函数的第一个参数是错误对象，如果err为null，表示内错误，否则是报错\nif(err) return;\nif(stat.isAFile()){\n\tconsole.log('文件')；\n}else if(stat.isDirectory()){\n\tconsole.log('目录')；\n}\nconsole.log(stat);\n}\n")])])]),n("p",[e._v("atime\t文件访问时间")]),e._v(" "),n("p",[e._v("ctime\t文件的状态信息发生变化")]),e._v(" "),n("p",[e._v("mtime\t文件数据发生变化的时间")]),e._v(" "),n("p",[e._v("birthtime\t文件创建的时间")]),e._v(" "),n("p",[e._v("同步操作")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let ret = fs.readFileSync(strpath,'utf8');\nconsole.log(ret);\n")])])]),n("p",[e._v("读文件的操作")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const fs = require('fs');\nconst path = require('path');\n\nlet strpath = path.join(_dirname,'data.txt');\nfs.readFile(strpath,(err,data))=>{\n\tif(err) return;\n\tconsole.log(data.tostring());\n});\n//若有第二个参数并且是编码，那么回掉函数获取得到的数据就是字符串\n若没有第二个参数，那么得到的是buffer对象\nfs.readFile(string,'utf8',(err,data))=>{\n\tif(err)\treturn;\n\tconsole.log(data);\n});\n")])])]),n("p",[e._v("类与继承")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Animal(name){\n​\tthis.name = name;\n}\nAnimal.prototype.showName = function(){\n​\tconsole.log(this.name);\n}\nvar a = new Animal('Tom');\na.showName();\nvar a1 = new Animal('Jerry');\nal.showName();\nclass Animal{\n//静态方法\t只能通过类名调用，不可以使用实例对象调用\n\tstatic showInfo(){\n\t\tconsole.log('hi');\n\t}\n//构造函数\n\tconstructor(name){\n\tthis.name = name;\n\t}\n\tshowName(){\n\t\tconsole.log(this.name);\n\t}\n}\nlet a = new Animal('spike');\na.showName();\n//类的继承extends\nfunction Dog extends Animal{\n\tconstructor(color){\n\t\tsuper(name);\t//用来调用父类\n\t\tthis.color = color;\n\t}\n\tshowColor(){\n\tconsole.log(this.color);\n\t}\n}\nlet d = new Dog('dowdog','yellow');\nDog.showColor();\n")])])]),n("p",[e._v("大文件操作（流式操作）")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const path = require('path');\nconst fs = require('fs');\n\nlet spaht = path.join(_driname,'../03-source','file.zip');\nlet dpath = path.join('c:\\\\Users\\\\www');\n\nlet readStream = fs.createReadStream(spath);\nlet writeStream = fs.createWriteStream(dpath);\n\n//基于事件的处理方式\t//对内存的开销比较小\nlet num = 1；\nreadStram.on('data',(chunk)=>{\t//当处理文件时发生\n\tnum++;\n\twriteStream.write(chuck);\n});\nreadStream.on('end',()=>{\n\tconsole.log('文件处理完成'+num);\n})\n//pipe直接把输入流和输出流\nfs.createSreadStream(spath).pipe(fs.createWriteStream(dpath));\n")])])]),n("p",[e._v("目录操作")]),e._v(" "),n("p",[e._v("创建目录")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const path = require('path');\nconst fs = require('fs');\nfs.makdir(path.join(_dirname,'abc',(err)=>{\n\tconsole.log(err);\n});\nfs.mkdirSync(path.join(_dirname,'hello'));\n")])])]),n("p",[e._v("读取目录(先判断文件还是目录)")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("fs.readdir(_dirname,(err,files)=>{\n\tfiles.forEach((item,index)=>{\n\t\tfs.stat(path.join(_dirname,item),(err,sta)=>{\n\t\t\tif(stat.isFile()){\n\t\t\t\tconsole.log(item,'文件');\n\t\t\t}else if(stat.isDirectory(){\n\t\t\t\tconsole.log(item,'目录')；\n\t\t\t})\n\t\t})\n\t})\n})\n//同步\nlet files = fs.readdirSync(_dirnmae)；//效率低一些\nfiles.forEach(略\n//删除目录\nfs.rmdir(path.join(_dirname,'abc'),(err)=>{\nconsole.log(err);\n})\n//同步\nfs.rmadirSync(path.join(_dirname,'qqq'));\n")])])]),n("p",[e._v("写入文件操作")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const fs = require('fs');\nconst path =reauire('path');\nlet strpath = path.join(_dirname,'data.txt');\nfs.writeFile(strpath,'hello nihao',(err)=>{\n\tif((!err){\n\tconsole.log('文件写入成功');\n\t}\n});\n//同步操作\nfs.writeFileSync(strpath,'tom and jerry');\n")])])]),n("hr"),e._v(" "),n("h2",{attrs:{id:"包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#包"}},[e._v("#")]),e._v(" 包")]),e._v(" "),n("p",[e._v("NPM管理工具")]),e._v(" "),n("p",[e._v("全局安装 npm install -g  包名称\t一般用于命令行工具")]),e._v(" "),n("p",[e._v("本地安装  npm install 包名称\t一般用于实际开发工作")]),e._v(" "),n("p",[e._v("指定版本 npm install -g 包名称@版本号")]),e._v(" "),n("p",[e._v("卸载 unistall -g 包名称")]),e._v(" "),n("p",[e._v("更新 npm upadate -g 包名称")]),e._v(" "),n("p",[e._v("--save向生产环境添加依赖")]),e._v(" "),n("p",[e._v("--save-dev  向开发环境添加依赖")]),e._v(" "),n("p",[e._v("yarn工具基本使用")]),e._v(" "),n("p",[e._v("安装 npm install -g yarn")]),e._v(" "),n("p",[e._v("初始化包")]),e._v(" "),n("p",[e._v("npm init")]),e._v(" "),n("p",[e._v("yarn init")]),e._v(" "),n("p",[e._v("安装包")]),e._v(" "),n("p",[e._v("npm install xxx --save")]),e._v(" "),n("p",[e._v("yarn add xxx")]),e._v(" "),n("p",[e._v("移除包")]),e._v(" "),n("p",[e._v("npm unistall xxx")]),e._v(" "),n("p",[e._v("yarn remove xxx")]),e._v(" "),n("p",[e._v("更新包")]),e._v(" "),n("p",[e._v("yarn upgrad xxx")]),e._v(" "),n("p",[e._v("安装开发依赖的包")]),e._v(" "),n("p",[e._v("yarn add xxx --dev")]),e._v(" "),n("p",[e._v("全局安装")]),e._v(" "),n("p",[e._v("yarn global add xxx")]),e._v(" "),n("p",[e._v("设置下载镜像地址")]),e._v(" "),n("p",[e._v("yarn config set registry url")]),e._v(" "),n("p",[e._v("安装所有依赖")]),e._v(" "),n("p",[e._v("yarn install")]),e._v(" "),n("hr"),e._v(" "),n("h4",{attrs:{id:"req与res对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#req与res对象"}},[e._v("#")]),e._v(" req与res对象")]),e._v(" "),n("p",[e._v("处理请求路径的分发\nreq方法")]),e._v(" "),n("p",[e._v("是Class: http.IncomingMessage的实例对象")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("res.end(req.url);\t//url获取URL中的路径（端口之后部分）\n")])])]),n("p",[e._v("res对象")]),e._v(" "),n("p",[e._v("是Class: http.ServerResponse的实例对象")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("res.write('hello'); //write向客户端响应内容(可以写多次)\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("res.end();\t//end方法用来完成响应，只能执行一次\n")])])]),n("p",[e._v("响应完整的页面信息")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const http = require('http');\nconst path = require('path');\nconst fs = require('fs');\n\n// 根据路径读取文件的内容，并且响应到浏览器端\nexports.staticServer = (req,res,root) => {\n    fs.readFile(path.join(root,req.url),(err,fileContent)=>{\n        if(err){\n            // 没有找到对应文件\n            res.writeHead(404,{ 'Content-Type':'text/plain; charset=utf8' });\n            res.end('页面被狗狗叼走了');\n        }else{\n            let dtype = 'text/html';\n            // 获取请求文件的后缀\n            let ext = path.extname(req.url);\n            // 如果请求的文件后缀合理，就获取到标准的响应格式\n            if(mime[ext]){\n                dtype = mime[ext];\n            }\n            // 如果响应的内容是文本，就设置成utf8编码\n            if(dtype.startsWith('text')){\n                dtype += '; charset=utf8'\n            }\n            // 设置响应头信息\n            res.writeHead(200,{ 'Content-Type':dtype });\n            res.end(fileContent);\n        }\n    });\n}\n")])])]),n("h4",{attrs:{id:"parse方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#parse方法"}},[e._v("#")]),e._v(" parse方法")]),e._v(" "),n("p",[e._v("作用: 把URL字符串转化为对象")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let str = 'http://www.baidu.com/abc/qqq?flag=123&keyword=java';\nlet ret = url.parse(str,true);\nconsole.log(ret.query.keyword);\n")])])]),n("h4",{attrs:{id:"format方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#format方法"}},[e._v("#")]),e._v(" format方法")]),e._v(" "),n("p",[e._v("作用: 把对象转化为标准的URL字符串")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let obj = {\n   protocol: 'http:',\n   slashes: true,\n   auth: null,\n   href: 'http://www.baidu.com/abc/qqq?flag=123&keyword=java' \n };\n let ret1 = url.format(obj);\n console.log(ret1);\n")])])]),n("h4",{attrs:{id:"实例-简单登录验证"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实例-简单登录验证"}},[e._v("#")]),e._v(" 实例:简单登录验证")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<body>\n    <form action="http://localhost:3000/login" method="post">\n        用户名：<input type="text" name="username"><br>\n        密码：<input type="password" name="password"><br>\n        <input type="submit" value="提交">\n    </form>\n</body>\n')])])]),n("p",[e._v("index.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const http = require('http');\nconst url = require('url');\nconst querystring = require('querystring');\nconst ss = require('./06.js');\n\nhttp.createServer((req,res)=>{\n    // 启动静态资源服务\n    if(req.url.startsWith('/www')){\t//如果是登录页面\n        ss.staticServer(req,res,__dirname);\n    }\n    console.log(req.url);\n    // 动态资源\n    if(req.url.startsWith('/login')){//若是登录\n        // get请求\n        if(req.method == 'GET'){\n            let param = url.parse(req.url,true).query;\n            if(param.username == 'admin' && param.password == '123'){//判断登录密码\n                res.end('get success');\n            }else{\n                res.end('get failure');\n            }\n        }\n        // post请求\n        if(req.method == 'POST'){\n            let pdata = '';\n            req.on('data',(chunk)=>{\n                pdata += chunk;\n            });\n            req.on('end',()=>{\n                let obj = querystring.parse(pdata);\n                if(obj.username == 'admin' && obj.password == '123'){\n                    res.end('post success');\n                }else{\n                    res.end('post failure');\n                }\n            });\n        }\n    }\n\n}).listen(3000,()=>{\n    console.log('running....');\n});\n")])])]),n("h3",{attrs:{id:"实例-动态网站开发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实例-动态网站开发"}},[e._v("#")]),e._v(" 实例:动态网站开发")]),e._v(" "),n("p",[e._v("成绩查询功能")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<body>\n    <form action="http://localhost:3000/score" method="post">\n        请输入考号：<input type="text" name="code">\n        <input type="submit" value="查询">\n    </form>\n</body>\n')])])]),n("p",[e._v("成绩结果 html")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<body>\n    <div>\n        <ul>\n            <li>语文：$$chinese$$</li>\n            <li>数学：$$math$$</li>\n            <li>外语：$$english$$</li>\n            <li>综合：$$summary$$</li>\n        </ul>\n    </div>\n</body>\n")])])]),n("p",[e._v("核心index.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const http = require('http');\t//node请求四个方法1\nconst path = require('path');\t//2\nconst fs = require('fs');\t\t//3\nconst querystring = require('querystring');\t//querystring查询字符串方法4\n\nconst scoreData = require('./scores.json');//json数据\n\nhttp.createServer((req,res)=>{\t  // 路由（请求路径+请求方式）\n  \n  // 查询成绩的入口地址是否正确 /query为入口\n  //startsWith()方法 ES6字符串是否在头部  method表单 html中返回表单\n  if(req.url.startsWith('/query') && req.method == 'GET'){//判断入口和method表单\n     //连接路径 \n     fs.readFile(path.join(__dirname,'view','index.tpl'),'utf8',(err,content)=>{\n        if(err){\t//提示错误信息\n          res.writeHead(500,{ 'Content-Type':'text/plain; charset=utf8' });\n          res.end('服务器错误，请与管理员联系');\n        }\n            res.end(content);\n      });\n  \n  //否post 获取成绩的结果 /score\n  }else if(req.url.startsWith('/score') && req.method == 'POST'){//是否结果和mathod  \n   let pdata = ''; // 定义了一个post变量，用于暂存请求体的信息\n   req.on('data',(chunk)=>{// 通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中\n     pdata += chunk;\n   });  \n   //在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回\n   req.on('end',()=>{\t//Jquery 原始为 ,function(){    \n     //解析参数\n     let obj = querystring.parse(pdata);\n     let result = scoreData[obj.code];\n     //连接路径\n     fs.readFile(path.join(__dirname,'view','result.tpl'),'utf8',(err,content)=>{\n       if(err){ //提示错误信息\n         res.writeHead(500,{ 'Content-Type':'text/plain; charset=utf8' });\n        res.end('服务器错误，请与管理员联系');\n      }\n        \n      // 返回内容 之前要进行数据渲染\n      content = content.replace('$$chinese$$',result.chinese);\n      content = content.replace('$$math$$',result.math);\n      content = content.replace('$$english$$',result.english);\n      content = content.replace('$$summary$$',result.summary);\n      res.end(content);//返回数据\n     });\n   });\n }\n}).listen(3000,()=>{\t//监听端口3000\n    console.log('running....'); //（可省略）\n});\n")])])]),n("p",[e._v("流程：请求路由➡判断是否入口和get post(是:连接路径➡提示错误 (否:返回数据) )➡")]),e._v(" "),n("p",[e._v("​\t(否:连接路径➡提示错误同上➡定义pdata存储➡data事件监听(pdata累加chunk)➡querystring解析pdata参数     ➡result存储解析参数➡连接路径➡提示错误同上➡返回渲染内容➡返回数据)➡")]),e._v(" "),n("p",[e._v("监听端口")]),e._v(" "),n("hr"),e._v(" "),n("h2",{attrs:{id:"模板引擎"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模板引擎"}},[e._v("#")]),e._v(" 模板引擎")]),e._v(" "),n("p",[e._v("???")]),e._v(" "),n("h2",{attrs:{id:"案例-图书管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#案例-图书管理"}},[e._v("#")]),e._v(" 案例:图书管理")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<body>\n    <div class="title">图书管理系统<a href="/toAddBook">添加图书</a></div>  //添加\n    <div class="content">\n        <table cellpadding="0" cellspacing="0">\n            <thead>\n                <tr>\n                    <th>编号</th>\n                    <th>名称</th>\n                    <th>作者</th>\n                    <th>分类</th>\n                    <th>描述</th>\n                    <th>操作</th>\n                </tr>\n            </thead>\n            <tbody>\n                {{each list}}\t//jquery方法，遍历\n                <tr>\n                    <td>{{$value.id}}</td>\n                    <td>{{$value.name}}</td>\n                    <td>{{$value.author}}</td>\n                    <td>{{$value.category}}</td>\n                    <td>{{$value.description}}</td>\n                    <td><a href="/toEditBook?id={{$value.id}}">修改</a>|<a href="/deleteBook?id={{$value.id}}">删除</a></td>\t//修改 删除\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</body>\n')])])]),n("p",[e._v("添加图书addBook.art")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div>添加图书</div>\n    <form action="/addBook" method="post">\n        名称：<input type="text" name="name"><br>\n        作者：<input type="text" name="author"><br>\n        分类：<input type="text" name="category"><br>\n        描述：<input type="text" name="description"><br>\n        <input type="submit" value="提交">\n    </form>\n')])])]),n("p",[e._v("修改图书editBook.art")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div>修改图书</div>\n    <form action="/editBook" method="post">\n        <input type="hidden" name="id" value="{{id}}">\n        名称：<input type="text" name="name" value="{{name}}"><br>\n        作者：<input type="text" name="author" value="{{author}}"><br>\n        分类：<input type="text" name="category" value="{{category}}"><br>\n        描述：<input type="text" name="description" value="{{description}}"><br>\n        <input type="submit" value="提交">\n    </form>\n')])])]),n("p",[e._v("experss图书管理系统-入口文件 index.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const express = require('express');\nconst path = require('path');\nconst router = require('./router.js');\nconst template = require('art-template');//插件\nconst bodyParser = require('body-parser');//插件\nconst app = express();\t//experss创建\n\n// 启动静态资源服务\napp.use('/www',express.static('public'));\n\n// 设置模板引擎\n// 设置模板的路径\napp.set('views',path.join(__dirname,'views'));\n// 设置模板引擎\napp.set('view engine','art');\n// 使express兼容art-template模板引擎\napp.engine('art', require('express-art-template'));\n\n// 处理请求参数\n// 挂载参数处理中间件（post）\napp.use(bodyParser.urlencoded({ extended: false }));\n// 处理json格式的参数\napp.use(bodyParser.json());\n\n// 启动服务器功能\n// 配置路由\napp.use(router);\n// 监听端口\napp.listen(3000,()=>{\n    console.log('running...');\n});\n\n流程: 启动静态服务→设置模板路径→engine兼容art模板→挂载中间件post→处理json参数→配置路由→监听端口\n")])])]),n("p",[e._v("封装操作数据库的通用api db.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const mysql = require('mysql');\t//创建请求sql数据\n\nexports.base = (sql,data,callback) => {\n    // 创建数据库连接\n    const connection = mysql.createConnection({\n        host: 'localhost', // 数据库所在的服务器的域名或者IP地址\n        user: 'root', // 登录数据库的账号\n        password: '', // 登录数据库的密码\n        database: 'book' // 数据库名称\n    });\n    // 执行连接操作\n    connection.connect();\n\n    // 操作数据库(数据库操作也是异步的)\n    connection.query(sql,data, function(error, results, fields) \t{\n        if (error) throw error;//报错提示\n        callback(results);\n    });\n    // 关闭数据库\n    connection.end();\n}\n流程:创建请求sql→创建数据库连接(ip地址域名 账户 密码 数据库名)→执行连接→\n   创建操作数据库(报错提示→返回结果)→关闭数据库\n")])])]),n("p",[e._v("//路由模块 route.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const express = require('express');\nconst router = express.Router();\t//路由方法\nconst service = require('./service.js');\n// 路由处理\n// 渲染主页\nrouter.get('/',service.showIndex);\n// 添加图书(跳转到添加图书的页面)\nrouter.get('/toAddBook',service.toAddBook);\n// 添加图书(提交表单)\nrouter.post('/addBook',service.addBook);\n// 跳转到编辑图书信息页面\nrouter.get('/toEditBook',service.toEditBook);\n// 编辑图书提交表单\nrouter.post('/editBook',service.editBook);\n// 删除图书信息\nrouter.get('/deleteBook',service.deleteBook);\nmodule.exports = router;\n")])])]),n("p",[e._v("业务模块 service.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const data = require('./data.json');\nconst path = require('path');\nconst fs = require('fs');\nconst db = require('./db.js');\n\n// 自动生成图书编号（自增）\nlet maxBookCode = ()=>{\n    let arr = [];\n    data.forEach((item)=>{\n        arr.push(item.id);\n    });\n    return Math.max.apply(null,arr);\n}\n// 把内存数据写入文件\nlet writeDataToFile = (res) => {  \t  fs.writeFile(path.join(__dirname,'data.json'),JSON.stringify(data,null,4),(err)=>{\n        if(err){\n            res.send('server error');\n        }\n        // 文件写入成功之后重新跳转到主页面\n        res.redirect('/');\n    });\n}\n\n// 渲染主页面\nexports.showIndex = (req,res) => {\t\n    let sql = 'select * from book';\t//sql查询\n    db.base(sql,null,(result)=>{\t//查询数据返回\n        res.render('index',{list : result});\n    });\n}\n\n// 跳转到添加图书的页面\nexports.toAddBook = (req,res) => {\n    res.render('addBook',{});\n}\n// 添加图书保存数据\nexports.addBook = (req,res) => {\n    // 获取表单数据\n    let info = req.body;\n    let book = {};\n    for(let key in info){\t//添加数据\n        book[key] = info[key];\n    }\n    let sql = 'insert into book set ?';\t//sql数据添加\n    db.base(sql,book,(result)=>{\t//返回添加数据\n        if(result.affectedRows == 1){\t//1\n            res.redirect('/');\n        }\n    });\n}\n\n// 跳转编辑图书页面\nexports.toEditBook = (req,res) => {\n    let id = req.query.id;\n    let sql = 'select * from book where id=?';//sql查询\n    let data = [id];\n    db.base(sql,data,(result)=>{\n        res.render('editBook',result[0]);\n    });\n}\n// 编辑图书更新数据\nexports.editBook = (req,res) => {\n    let info = req.body;\n    let sql = 'update book set name=?,author=?,category=?,description=? where id=?';//sql编辑\n    let data = [info.name,info.author,info.category,info.description,info.id];\n    db.base(sql,data,(result)=>{\n        if(result.affectedRows == 1){\n            res.redirect('/');\n        }\n    });\n}\n// 删除图书信息\nexports.deleteBook = (req,res) => {\n    let id = req.query.id;\n    let sql = 'delete from book where id=?';\t//sql删除\n    let data = [id];\n    db.base(sql,data,(result)=>{\n        if(result.affectedRows == 1){\n            res.redirect('/');\n        }\n    });\n}\n")])])]),n("p",[e._v("json数据data.json")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[\n    {\n        "id": "1",\n        "name": "三国演义",\n        "author": "罗贯中",\n        "category": "文学",\n        "desc": "一个杀伐纷争的年代"\n    },\n]\n')])])]),n("p",[e._v("json包package.json")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  "name": "mybook",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC",\n  "dependencies": {\n    "art-template": "^4.9.1",\n    "body-parser": "^1.17.2",\n    "express": "^4.15.3",\n    "express-art-template": "^1.0.0",\n    "mysql": "github:mysqljs/mysql"\n  }\n}\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);