(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{341:function(e,n,t){"use strict";t.r(n);var s=t(16),a=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"express"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#express"}},[e._v("#")]),e._v(" Express")]),e._v(" "),t("p",[e._v("Express之HelloWorld")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var express = require('express');//引入Express模块\nvar app = express();\t//创建Express方法\n\nconst app = require('express')();//等效\n\n// 绑定路由\napp.get('/', function(req, res) {\n    // 响应请求\n    res.send('Hello World!');\n});\n\nvar server = app.listen(3000, \"localhost\", function() {\n    // 监听的域名或者IP\n    var host = server.address().address;\n    // 监听的端口\n    var port = server.address().port;\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n")])])]),t("p",[e._v("托管静态文件")]),e._v(" "),t("p",[e._v("可以指定虚拟目录\n可以指定多个目录作为静态资源目录")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const express = require('express');\nconst app = express();\n// 实现静态资源服务\n// use方法的第一个参数可以指定一个虚拟路径\n// let server = app.use('/abc',express.static('public'));\n// app.use('/nihao',express.static('hello'));\n// server.listen(3000,()=>{\n//     console.log('running...');\n// });\n// -----------------------------------\napp.use('/abc',express.static('public'));\napp.use('/nihao',express.static('hello'));\napp.listen(3000,()=>{\n    console.log('running...');\n});\n")])])]),t("h4",{attrs:{id:"路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[e._v("#")]),e._v(" 路由")]),e._v(" "),t("p",[e._v("根据请求路径和请求方式进行路径分发处理\nhttp的常用请求方式：\npost   添加\nget    查询\nput    更新\ndelete 删除")]),e._v(" "),t("h5",{attrs:{id:"get-post-put-请求路由到某路径"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-post-put-请求路由到某路径"}},[e._v("#")]),e._v(" get() \tpost()\tput() \t请求路由到某路径")]),e._v(" "),t("h5",{attrs:{id:"delete-删除请求路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#delete-删除请求路由"}},[e._v("#")]),e._v(" delete() \t删除请求路由")]),e._v(" "),t("h5",{attrs:{id:"all-执行回调all-all方法绑定的路由与请求方式无关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#all-执行回调all-all方法绑定的路由与请求方式无关"}},[e._v("#")]),e._v(" all() \t执行回调all()\t//all方法绑定的路由与请求方式无关")]),e._v(" "),t("h5",{attrs:{id:"use-挂载中间件方法到路径上即加"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#use-挂载中间件方法到路径上即加"}},[e._v("#")]),e._v(" use()\t挂载"),t("a",{attrs:{href:"http://expressjs.com/guide/using-middleware.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中间件"),t("OutboundLink")],1),e._v("方法到路径上\t即加/")]),e._v(" "),t("h5",{attrs:{id:"route-返回单个路由的实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#route-返回单个路由的实例"}},[e._v("#")]),e._v(" route()\t返回单个路由的实例")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("app.get('/',(req,res)=>{\t//实例\n     res.send('get data');\n});\n")])])]),t("h3",{attrs:{id:"案例-成绩查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#案例-成绩查询"}},[e._v("#")]),e._v(" 案例: 成绩查询")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<body>\n    <form action="http://localhost:3000/score" method="post">\n        请输入考号：<input type="text" name="code">\n        <input type="submit" value="查询">\n    </form>\n    <div><a href="http://localhost:3000/all">全部成绩</a></div>\n</body>\n')])])]),t("p",[e._v("js")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("onst http = require('http');\t//node请求方法\nconst path = require('path');\t//node请求方法\nconst fs = require('fs');\t\t//node请求方法名称\nconst querystring = require('querystring');\t//querystring查询字符串模块\nconst scoreData = require('./scores.json');\nconst template = require('art-template');\n\nhttp.createServer((req,res)=>{\t // 路由（请求路径+请求方式）\n    // 查询成绩的入口地址 /query\n    if(req.url.startsWith('/query') && req.method == 'GET'){\n        let content = template(path.join(__dirname,'view','index.art'),{});\n        res.end(content);\n    }else if(req.url.startsWith('/score') && req.method == 'POST'){\n        // 获取成绩的结果 /score\n        let pdata = '';\n        req.on('data',(chunk)=>{\n            pdata += chunk;\n        });\n        req.on('end',()=>{\n            let obj = querystring.parse(pdata);\n            let result = scoreData[obj.code];\n            let content = template(path.join(__dirname,'view','result.art'),result);\n            res.end(content);\n        });\n    }else if(req.url.startsWith('/all') && req.method == 'GET'){\n        let arr = [];\n        for(let key in scoreData){\n            arr.push(scoreData[key]);\n        }\n        // 全部成绩\n        let content = template(path.join(__dirname,'view','list.art'),{\n            list : arr\n        });\n        res.end(content);\n    }\n}).listen(3000,()=>{\n    console.log('running....');\n});\n")])])]),t("h4",{attrs:{id:"中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中间件"}},[e._v("#")]),e._v(" 中间件")]),e._v(" "),t("p",[e._v("就是处理过程中的一个环节（本质上就是一个函数）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const express = require('express');\nconst app = express();\nlet total = 0;\n\napp.use((req,res,next)=>{\n    console.log('有人访问');\n    // next方法的作用就是把请求传递到下一个中间件\n    next()\n});\n\napp.use('/user',(req,res,next)=>{\n    // 记录访问时间\n    console.log(Date.now());\n    // next方法的作用就是把请求传递到下一个中间件\n    next()\n});\n\napp.use('/user',(req,res,next)=>{\n    // 记录访问日志\n    console.log('访问了/user');\n    next()\n});\n\napp.use('/user',(req,res)=>{\n    total++;\n    console.log(total);\n    res.send('result');\n});\n\napp.listen(3000,()=>{\n    console.log('running...');\n});\n")])])]),t("p",[e._v("中间件的挂载方式和执行流程\nuse方法\n路由方式:get post put delete")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const express = require('express');\nconst app = express();\n\n// app.get('/abc',(req,res,next)=>{\n//     console.log(1);\n//     // 跳转到下一个路由\n//     next('route');\n// },(req,res)=>{\n//     console.log(2);\n//     res.send('abc');\n// });\n\n// app.get('/abc',(req,res)=>{\n//     console.log(3);\n//     res.send('hello');\n// });\n// --------------------------------\nvar cb0 = function (req, res, next) {\n  console.log('CB0');\n  next();\n}\n\nvar cb1 = function (req, res, next) {\n  console.log('CB1');\n  next();\n}\n\nvar cb2 = function (req, res) {\n  res.send('Hello from C!');\n}\n\napp.get('/example', [cb0, cb1, cb2]);\n\napp.listen(3000,()=>{\n    console.log('running...');\n});\n")])])]),t("p",[e._v("应用中间件")]),e._v(" "),t("p",[e._v("参数处理")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser')\n// 挂载内置中间件\napp.use(express.static('public'));\n\n// 挂载参数处理中间件（post）\napp.use(bodyParser.urlencoded({ extended: false }));\n// 处理json格式的参数\napp.use(bodyParser.json());\n\n// 处理get提交参数\napp.get('/login',(req,res)=>{\n    let data = req.query;\n    console.log(data);\n    res.send('get data');\n});\n\n// 处理post提交参数\napp.post('/login',(req,res)=>{\n    let data = req.body;\n    // console.log(data);\n    if(data.username == 'admin' && data.password == '123'){\n        res.send('success');\n    }else{\n        res.send('failure');\n    }\n});\n\napp.put('/login',(req,res)=>{\n    res.end('put data');\n});\n\napp.delete('/login',(req,res)=>{\n    res.end('delete data');\n});\n\napp.listen(3000,()=>{\n    console.log('running...');\n});\n")])])]),t("p",[e._v("模板引擎整合：art-template")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <script type=\"text/javascript\" src=\"jquery.js\"><\/script>\t//引入jquery\n    <script type=\"text/javascript\">\n    $(function(){\n        $('#btn').click(function(){\n            var obj = {\n                username : $('#username').val(),\n                password : $('#password').val()\n            }\n            $.ajax({\n                type : 'delete',\n                url : 'http://localhost:3000/login',\n                contentType : 'application/json',\n                dataType : 'text',\n                // data : $('form:eq(0)').serialize(),\n                data : JSON.stringify(obj),\n                success : function(data){\n                    console.log(data);\n                }\n            });\n        });\n    }); \n    <\/script>\n</head>\n<body>\n    <form action=\"http://localhost:3000/login\" method=\"get\">\n        用户名：<input type=\"text\" name=\"username\" id=\"username\"><br>\n        密  码：<input type=\"password\" name=\"password\" id=\"password\"><br>\n        <input type=\"button\" id=\"btn\" value=\"提交\">\n    </form>\n</body>\n</html>\n\n//\nconst express = require('express');\nconst path = require('path');\nconst template = require('art-template');\nconst app = express();\n\n// 设置模板的路径\napp.set('views',path.join(__dirname,'views'));\n// 设置模板引擎\napp.set('view engine','art');\n\n// 使express兼容art-template模板引擎\napp.engine('art', require('express-art-template'));\n\napp.get('/list',(req,res)=>{\n    let data = {\n        title : '水果',\n        list : ['apple','orange','banana']\n    }\n    // 参数一：模板名称；参数二：渲染模板的数据\n    res.render('list',data);\n});\n\napp.listen(3000,()=>{\n    console.log('running...');\n});\n")])])]),t("h3",{attrs:{id:"案例-登录验证express"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#案例-登录验证express"}},[e._v("#")]),e._v(" 案例:登录验证Express")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);